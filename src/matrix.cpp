#include <iostream>
#include <iomanip>
#include <random>
#include <chrono>

#include "../include/matrix.hpp"
using namespace std;


double Matrix::generateRandomNumber() {
    // https://stackoverflow.com/questions/9878965/rand-between-0-and-1
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(0, 1);

    return dis(gen); // Use dis to transform the random unsigned int generated by gen into a double in [0, 1).
}

Matrix::Matrix(int numRows, int numCols, bool isRandom) {
    this->numRows = numRows;
    this->numCols = numCols;

    // for each row and each column, initialize the matrix either 0s or
    // random doubles in [0, 1)
    for (int i=0; i<numRows; i++) {

        vector<double> colValues;

        for (int j=0; j<numCols; j++) {
            double newValue = 0.00;
            if(isRandom) {
                newValue = this->generateRandomNumber();
            }

            colValues.push_back(newValue);
       }

       this->values.push_back(colValues);
    }
}

Matrix *Matrix::transpose() {
    /*
    Returns the transposed matrix.
    */

    Matrix *m = new Matrix(this->numCols, this->numRows, false);

    for (int i=0; i<this->numRows; i++) {
        for (int j=0; j<this->numCols; j++) {
            m->setValue(j, i, this->getValue(i,j));
        }
    }

    return m;
}

void Matrix::printToConsole() {
    /*
    Prints the matrix to the console.
    */

    for (int i=0; i<this->numRows; i++) {
        for (int j=0; j<this->numCols; j++) {
            cout << setw(15) << setprecision(5) << this->values.at(i).at(j); // TODO: improve formatting to center matrices with arbitrary number of columns
        }
        cout << endl;
    }

}
